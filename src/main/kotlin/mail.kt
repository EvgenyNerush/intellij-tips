import java.util.*

fun main() {
    /* Небольшой сборник советов и полезных сочетаний клавиш для IntelliJ IDEA */

    // Откройте два файла, например, main.kt и classes.kt. Они откроются во вкладках (tabs),
    // переключаться между которыми можно с помощью
    // Alt + (стрелка вправо/влево)
    // Вкладки можно закрепить друг над другом или рядом друг с другом (drag and dock tabs).
    // Для этого возьмите вкладку за заголовок, и перетащите либо к правой/левой/верхней или
    // нижней стороне области с вкладками. Для возврата к прежнему виду перетащите заголовок
    // вкладки на прежнее место.

    // Для того, чтобы закрыть вспомогательные области (Project, Terminal...) можно нажать
    // Ctrl + Shift + F12
    // при этом область с кодом максимально расширится. Повторное нажатие вернёт всё обратно.

    // Попробуйте переименовать функцию `myFun' (например, в `qwe', и сразу после этого нажать
    // Alt + Enter
    // IntelliJ предложит вам автоматически переименовать функцию во всех местах, где она
    // вызывается. Попробуйте переименовать функцию тем же способом обратно в `myFun'.
    // Вообще Alt + Enter в данном случае работает не всегда, и конкретно для переименования
    // сущности во всём коде можно использовать
    // Shift + F6
    // или правую кнопку мыши -> Refactor -> Rename

    fun myFun() {
        println("hi from `myFun\'!")
    }

    fun myAnotherFun() {
        println("hi from `myAnotherFun\'!")
    }
    myFun()

    // Попробуйте вызвать `myFun' ещё раз - начните печатать `myF' или `mf`, и нажмите
    // Enter
    // по варианту из выпадающего списка для автозаполнения. Скобки IntelliJ
    // тоже поставит самостоятельно. Попробуйте напечатать `maf`, и нажать Enter

    myAnotherFun()

    // Поместите курсор в начало строки c `myFun', напечатайте `maf`, и нажмите
    // Tab
    // - вместо вставки (как при нажатии Enter) произойдёт замена имени функции

    myFun()

    // Чтобы заменить слово во всём коде, когда курсор находится на слове, нажмите
    // Ctrl + Alt + Shift + j
    // Так можно заменить `myFun' на что-то другое не только в основном коде, но и в
    // комментариях.
    // Если нужно заменить имя лишь в паре строк, используйте
    // Alt + j
    // (попробуйте нажать эту комбинацию несколько раз)

    myFun()
    myFun()
    myFun()

    // Для удаления строки целиком в IntelliJ обычно используется комбинация
    // Ctrl + y

    myFun()

    // Для "склейки" строк можно использовать
    // Ctrl + Shift + j
    // Для отмены сделанных изменений (undo) используется
    // Ctrl + z
    // для отката отмены -
    // Ctrl + Shift + z

    fun yourFun() {
        print("Hi from `yourFun\'!")
    }

    fun yourAnotherFun() {
        print("Hi from `yourFun\'!")
    }

    // Часто бывает нужно изменить что-то в нескольких строчках сразу - закомментировать их или, например,
    // изменить имя функции с `myFun' на `yourFun'. Для этого используется комбинация
    // Ctrl + Ctrl + (стрелка вниз)
    // (нажать Ctrl 2 раза подряд, после второго нажатия клавишу не отпускать, переместиться на нужное число
    // линий вниз). Выход из режима множественных курсоров - по Esc. Используя
    // Alt + Shift + (левая кнопка мыши)
    // можно поставить несколько курсоров в произвольных местах, а не только друг под другом.
    myFun()
    myAnotherFun()
    myAnotherFun()

    // Shift + Shift
    // (нажать Shift 2 раза подряд) открывает окно Search Everywhere, в котором, помимо поиска, можно ещё проводить
    // простые вычисления (правда, аргумент тригонометрических функций при этом - в градусах!)

    val children = listOf("Masha", "Dasha", "Misha")

    // Попробуйте набрать `children.for', выбрать стрелкой вариант `for' и нажать Enter

    for (child in children) {
        println(child)
    }

    // Блок кода выше можно набрать примерно так: `ch Enter .for Enter (стрелка вверх) Enter Enter
    // pln Enter <- ch Enter'

    // Попробуйте набрать (true && true).if, и нажать Enter

    if (true && true) {
        println("True!")
    }

    // Ctrl + w и Ctrl + Shift + w
    // удобно использовать для расшитения/сужения выделенной части кода, а
    // Ctrl + m
    // - для навигации к началу/концу блока фигурных скобок (кажется, работает не всегда)

    fun yetAnotherFun() {
        println("I\'m tired!")
        println("One more line...")
    }

    // Ctrl + Shift + (стрелка вверх/вниз)
    // двигает всю строчку целиком

    // Ctrl + Shift + Enter
    // используется для автоматической подстановки недостающих запятых, скобок и т. п., а также для перехода
    // на следующую строку, если курсор находится в середине строки (если, конечно, строка правильно построена
    // синтаксически). Попробуйте раскомментировать строки ниже (Ctrl + Ctrl) и, переводя курсор в конец
    // (или в середину!) строки, понажимать Ctrl + Shift + Enter

    //fun newFun(x: Int)
    //for (i in 1..10)
    //yetAnotherFun
    //val x = 7

    // extract parameter Ctrl + Alt + p
    // code completion Ctrl + Shift + Space
    // Ctrl + Shift + t
    // Ctrl + Tab
    // Ctrl + e
    // Ctrl + Shift + e
    // Ctrl + Shift + v my friend!
    // Crtl + Alt + t

}
